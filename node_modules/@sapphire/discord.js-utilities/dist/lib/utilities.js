"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.canRemoveAllReactions = exports.canReact = exports.canSendAttachments = exports.canSendEmbeds = exports.canSendMessages = exports.canReadMessages = void 0;
const utilities_1 = require("@sapphire/utilities");
const discord_js_1 = require("discord.js");
const type_guards_1 = require("./type-guards");
const canReadMessagesPermissions = new discord_js_1.Permissions(['VIEW_CHANNEL']);
/**
 * Determines whether or not we can send messages in a given channel.
 * @param channel The channel to test the permissions from.
 * @returns Whether or not we can send messages in the specified channel.
 */
function canReadMessages(channel) {
    if ((0, utilities_1.isNullish)(channel))
        return false;
    if ((0, type_guards_1.isDMChannel)(channel))
        return true;
    return canDoUtility(channel, canReadMessagesPermissions);
}
exports.canReadMessages = canReadMessages;
const canSendMessagesPermissions = new discord_js_1.Permissions([canReadMessagesPermissions, 'SEND_MESSAGES']);
/**
 * Determines whether or not we can send messages in a given channel.
 * @param channel The channel to test the permissions from.
 * @returns Whether or not we can send messages in the specified channel.
 */
function canSendMessages(channel) {
    if ((0, utilities_1.isNullish)(channel))
        return false;
    if ((0, type_guards_1.isDMChannel)(channel))
        return true;
    if (channel.isThread() && !channel.sendable)
        return false;
    return canDoUtility(channel, canSendMessagesPermissions);
}
exports.canSendMessages = canSendMessages;
const canSendEmbedsPermissions = new discord_js_1.Permissions([canSendMessagesPermissions, 'EMBED_LINKS']);
/**
 * Determines whether or not we can send embeds in a given channel.
 * @param channel The channel to test the permissions from.
 * @returns Whether or not we can send embeds in the specified channel.
 */
function canSendEmbeds(channel) {
    if ((0, utilities_1.isNullish)(channel))
        return false;
    if ((0, type_guards_1.isDMChannel)(channel))
        return true;
    if (channel.isThread() && !channel.sendable)
        return false;
    return canDoUtility(channel, canSendEmbedsPermissions);
}
exports.canSendEmbeds = canSendEmbeds;
const canSendAttachmentsPermissions = new discord_js_1.Permissions([canSendMessagesPermissions, 'ATTACH_FILES']);
/**
 * Determines whether or not we can send attachments in a given channel.
 * @param channel The channel to test the permissions from.
 * @returns Whether or not we can send attachments in the specified channel.
 */
function canSendAttachments(channel) {
    if ((0, utilities_1.isNullish)(channel))
        return false;
    if ((0, type_guards_1.isDMChannel)(channel))
        return true;
    if (channel.isThread() && !channel.sendable)
        return false;
    return canDoUtility(channel, canSendAttachmentsPermissions);
}
exports.canSendAttachments = canSendAttachments;
const canReactPermissions = new discord_js_1.Permissions([canSendMessagesPermissions, 'READ_MESSAGE_HISTORY', 'ADD_REACTIONS']);
/**
 * Determines whether or not we can send react to messages in a given channel.
 * @param channel The channel to test the permissions from.
 * @returns Whether or not we can react to messages in the specified channel.
 */
function canReact(channel) {
    if ((0, utilities_1.isNullish)(channel))
        return false;
    if ((0, type_guards_1.isDMChannel)(channel))
        return true;
    if (channel.isThread() && channel.archived)
        return false;
    return canDoUtility(channel, canReactPermissions);
}
exports.canReact = canReact;
const canRemoveAllReactionsPermissions = new discord_js_1.Permissions([canReadMessagesPermissions, 'READ_MESSAGE_HISTORY', 'MANAGE_MESSAGES']);
/**
 * Determines whether or not we can remove reactions from messages in a given channel.
 * @param channel The channel to test the permissions from.
 * @returns Whether or not we can remove reactions from messages in the specified channel.
 */
function canRemoveAllReactions(channel) {
    if ((0, utilities_1.isNullish)(channel))
        return false;
    if ((0, type_guards_1.isDMChannel)(channel))
        return false;
    return canDoUtility(channel, canRemoveAllReactionsPermissions);
}
exports.canRemoveAllReactions = canRemoveAllReactions;
function canDoUtility(channel, permissionsToPass) {
    return (0, type_guards_1.isGuildBasedChannel)(channel) ? channel.permissionsFor(channel.guild.me).has(permissionsToPass) : true;
}
//# sourceMappingURL=utilities.js.map